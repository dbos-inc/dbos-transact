CREATE FUNCTION "{{methodName}}{{appVersion}}_func"(
    workflow_uuid TEXT{% for param in parameters %},
    "{{param.name}}" {{param.type}}{% endfor %}
) RETURNS JSONB AS $$ 

    if (globalThis.$run === undefined) plv8.execute('SELECT dbos.run_init();');
    if (globalThis.{{moduleName}}{{appVersion}} === undefined) plv8.execute('SELECT "{{moduleName}}{{appVersion}}_init"();');

    const $run = globalThis.$run;
    const { {{className}} } = globalThis.{{moduleName}}{{appVersion}};

    return $run(workflow_uuid, (ctx) => {{className}}.{{methodName}}(ctx{% for param in parameters %}, {{param.name}}{% endfor %}));

$$ LANGUAGE plv8;

CREATE PROCEDURE "{{methodName}}{{appVersion}}_proc"(
    {% unless readOnly %}buffered_results JSONB,{% endunless %}
    _workflow_uuid TEXT, 
    _function_id INT, 
    preset BOOLEAN, 
    OUT return_value JSONB{% for param in parameters %},
    "{{param.name}}" {{param.type}}{% endfor %}
)
LANGUAGE plpgsql
as $$
DECLARE
    _output JSONB;
    _error JSONB;
    _snapshot TEXT;
    _txn_id TEXT;
BEGIN
    SELECT dbos.check_execution(_workflow_uuid, _function_id, preset) INTO return_value;
    if return_value IS NOT NULL THEN
        RETURN;
    END IF;

    ROLLBACK; 
    SET TRANSACTION ISOLATION LEVEL {{isolationLevel}};
    {% if readOnly %}
    SET TRANSACTION READ ONLY;
    {% else %}
    PERFORM dbos.flush_buffered_results(_workflow_uuid, buffered_results);
    {% endif %}

    SELECT "{{methodName}}{{appVersion}}_func"(_workflow_uuid{% for param in parameters %}, "{{param.name}}"{% endfor %}) INTO return_value;
    SELECT pg_current_snapshot(), pg_current_xact_id_if_assigned() INTO _snapshot, _txn_id;
    SELECT return_value::jsonb->'output', return_value::jsonb->'error' INTO _output, _error;

    IF _error IS NOT NULL OR jsonb_typeof(_error) <> 'null' THEN
        ROLLBACK;
        {% unless readOnly %}
        PERFORM dbos.flush_buffered_results(_workflow_uuid, buffered_results);
        INSERT INTO dbos.transaction_outputs (workflow_uuid, function_id, error, txn_id, txn_snapshot)
            VALUES (_workflow_uuid, _function_id, _error, _txn_id, _snapshot);
        {% endunless %}
    ELSE 
        {% unless readOnly %}
        INSERT INTO dbos.transaction_outputs (workflow_uuid, function_id, output, txn_id, txn_snapshot)
            VALUES (_workflow_uuid, _function_id, _output, _txn_id, _snapshot);
        {% endunless %}
        SELECT return_value::jsonb || jsonb_build_object('txn_snapshot', pg_current_snapshot(), 'txn_id', pg_current_xact_id_if_assigned()) INTO return_value;
    END IF;

END; $$;

-----------------------------------------------------------

